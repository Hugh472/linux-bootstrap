---
- name: Full system setup and configuration
  hosts: all
  become: yes

  vars:
    fedora_packages:
      - lshw
      - nvme-cli
      - smartmontools
      - flatpak
      - vulkan-tools
      - git
      - python3-pip
      - rustup
      - golang
      - zsh
      - git
      - ethtool
      - hdparm
    debian_packages:
      - lshw
      - nvme-cli
      - smartmontools
      - flatpak
      - vulkan-tools
      - python3-pip
      - git
      - rustup
      - golang
      - zsh
      - git
      - ethtool
      - hdparm
    endeavoros_packages:
      - lshw
      - nvme-cli
      - smartmontools
      - flatpak
      - vulkan-tools
      - python-pip
      - git
      - rustup
      - go
      - zsh
      - git
      - ethtool
      - hdparm

  tasks:
    - name: Determine the OS
      shell: cat /etc/os-release | grep "^ID="
      register: os_id
      changed_when: false

    - name: Set package list based on OS
      set_fact:
        packages: "{{ fedora_packages }}" 
      when: os_id.stdout.find('fedora') != -1

    - name: Set package list based on OS
      set_fact:
        packages: "{{ debian_packages }}"
      when: os_id.stdout.find('debian') != -1

    - name: Set package list based on OS
      set_fact:
        packages: "{{ endeavoros_packages }}"
      when: os_id.stdout.find('endeavouros') != -1

    - name: Update all packages and firmware on Debian
      apt: 
        update_cache: yes
        upgrade: dist
      when: os_id.stdout.find('debian') != -1

    - name: Update all packages and firmware on Fedora
      dnf:
        name: '*'
        state: latest
      when: os_id.stdout.find('fedora') != -1

    - name: Update all packages and firmware on EndeavourOS
      pacman:
        update_cache: yes
        upgrade: yes
      when: os_id.stdout.find('endeavouros') != -1

    - name: Install necessary packages
      package:
        name: "{{ packages }}"
        state: present

    - name: Detect GPU type
      shell: lshw -C display | grep vendor | awk '{print $2}'
      register: gpu_vendor

    - name: Install NVIDIA drivers on Debian
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - nvidia-driver
        - nvidia-settings
        - vulkan-utils
      when: gpu_vendor.stdout.find('NVIDIA') != -1 and os_id.stdout.find('debian') != -1

    - name: Install NVIDIA drivers on Fedora
      dnf:
        name: "{{ item }}"
        state: present
      loop:
        - xorg-x11-drv-nvidia
        - xorg-x11-drv-nvidia-libs
        - vulkan
      when: gpu_vendor.stdout.find('NVIDIA') != -1 and os_id.stdout.find('fedora') != -1

    - name: Install NVIDIA drivers on EndeavourOS
      pacman:
        name: "{{ item }}"
        state: present
      loop:
        - nvidia
        - nvidia-utils
        - vulkan-icd-loader
      when: gpu_vendor.stdout.find('NVIDIA') != -1 and os_id.stdout.find('endeavouros') != -1

    - name: Install AMD drivers on Debian
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - mesa-vulkan-drivers
        - vulkan-utils
      when: gpu_vendor.stdout.find('AMD') != -1 and os_id.stdout.find('debian') != -1

    - name: Install AMD drivers on Fedora
      dnf:
        name: "{{ item }}"
        state: present
      loop:
        - xorg-x11-drv-amdgpu
        - vulkan
      when: gpu_vendor.stdout.find('AMD') != -1 and os_id.stdout.find('fedora') != -1

    - name: Install AMD drivers on EndeavourOS
      pacman:
        name: "{{ item }}"
        state: present
      loop:
        - xf86-video-amdgpu
        - vulkan-radeon
      when: gpu_vendor.stdout.find('AMD') != -1 and os_id.stdout.find('endeavouros') != -1

    - name: Install and configure Flatpak
      package:
        name: flatpak
        state: present
      when: os_id.stdout.find('fedora') != -1 or os_id.stdout.find('debian') != -1 or os_id.stdout.find('endeavouros') != -1

    - name: Add Flathub repository
      command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    - name: Install Molecule
      pip:
        name: molecule

    - name: Remove native versions of applications
      package:
        name: "{{ item }}"
        state: absent
      loop:
        - thunderbird
        - onlyoffice
        - calibre
        - standardnotes
        - ardour
        - firefox

    - name: Install applications as Flatpaks
      flatpak:
        name: "{{ item }}"
        state: present
        remote: flathub
      loop:
        - org.mozilla.Thunderbird
        - org.onlyoffice.desktopeditors
        - com.calibre_ebook.calibre
        - org.standardnotes.standardnotes
        - org.ardour.Ardour
        - org.mozilla.firefox

    - name: Install rustup
      shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: /usr/local/bin/rustup

    - name: Install Miniconda
      shell: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
        bash /tmp/miniconda.sh -b -p $HOME/miniconda
        $HOME/miniconda/bin/conda init zsh
      args:
        creates: $HOME/miniconda

    - name: Install Poetry
      pip:
        name: poetry

    - name: Install Golang
      package:
        name: golang
        state: present

    - name: Install asdf and plugins
      shell: |
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0
        echo '. $HOME/.asdf/asdf.sh' >> ~/.bashrc
        source ~/.bashrc
        asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
        asdf install nodejs latest
        asdf global nodejs latest
      args:
        creates: ~/.asdf

    - name: Install zsh-autosuggestions
      shell: |
        git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
        echo 'source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh' >> ~/.zshrc

    - name: Install VSCode
      shell: |
        if [[ "{{ os_id.stdout }}" == *"debian"* ]]; then
          wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
          sudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
          sudo apt install apt-transport-https
          sudo apt update
          sudo apt install code
        elif [[ "{{ os_id.stdout }}" == *"fedora"* ]]; then
          sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
          sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
          sudo dnf install code
        elif [[ "{{ os_id.stdout }}" == *"endeavouros"* ]]; then
          yay -S visual-studio-code-bin
        fi
      args:
        creates: /usr/bin/code

    - name: Install VSCodium
      shell: |
        if [[ "{{ os_id.stdout }}" == *"debian"* ]]; then
          wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg | sudo apt-key add -
          echo 'deb [arch=amd64] https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/debs/ vscodium main' | sudo tee --append /etc/apt/sources.list.d/vscodium.list
          sudo apt update
          sudo apt install codium
        elif [[ "{{ os_id.stdout }}" == *"fedora"* ]]; then
          sudo rpmkeys --import https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg
          echo -e "[gitlab.com_paulcarroty_vscodium]\nname=VSCodium\nbaseurl=https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/rpms/\nenabled=1\ngpgcheck=1\ngpgkey=https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg" | sudo tee /etc/yum.repos.d/vscodium.repo
          sudo dnf install codium
        elif [[ "{{ os_id.stdout }}" == *"endeavouros"* ]]; then
          yay -S vscodium-bin
        fi
      args:
        creates: /usr/bin/codium

    - name: Install Calibre DeDRM_tools plugin
      shell: |
        mkdir -p ~/.config/calibre/plugins
        wget https://github.com/noDRM/DeDRM_tools/releases/download/v7.2.1/DeDRM_plugin.zip -O ~/.config/calibre/plugins/DeDRM_plugin.zip
        calibre-customize -b ~/.config/calibre/plugins/DeDRM_plugin.zip
      args:
        creates: ~/.config/calibre/plugins/DeDRM_plugin.zip

    - name: Test Vulkan installation
      shell: vulkaninfo
      register: vulkan_test
      ignore_errors: yes

    - name: Print Vulkan test results
      debug:
        msg: "{{ vulkan_test.stdout }}"

    - name: Set up Wake on LAN
      shell: |
        sudo ethtool -s eth0 wol g
        sudo tee -a /etc/systemd/system/wol.service > /dev/null <<EOT
        [Unit]
        Description=Configure Wake on LAN
        After=network.target

        [Service]
        Type=oneshot
        ExecStart=/usr/sbin/ethtool -s eth0 wol g

        [Install]
        WantedBy=default.target
        EOT
        sudo systemctl enable wol.service
      args:
        creates: /etc/systemd/system/wol.service

    - name: Check if the drive is encrypted
      shell: lsblk -o NAME,FSTYPE | grep -w luks
      register: luks_check
      ignore_errors: yes

    - name: Configure encrypted drive for Wake on LAN
      shell: |
        if [ -n "{{ luks_check.stdout }}" ]; then
          sudo cryptsetup luksHeaderBackup /dev/sdX --header-backup-file /etc/cryptsetup-headers/$(hostname)-$(date +%F).header
        fi
      when: luks_check.stdout is defined and luks_check.stdout != ""
